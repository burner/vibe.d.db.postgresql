[
	{
		"file": "source/vibe/db/postgresql/package.d",
		"name": "vibe.db.postgresql",
		"members": [
			{
				"name": "ClientSettings",
				"line": 18,
				"comment": "\n",
				"members": [
					{
						"offset": 0,
						"name": "connString",
						"line": 20,
						"comment": "\n",
						"deco": "Aya",
						"char": 12,
						"kind": "variable"
					},
					{
						"offset": 16,
						"name": "afterStartConnectOrReset",
						"line": 21,
						"comment": "\n",
						"deco": "DFC4vibe2db10postgresql14Dpq2ConnectionZv",
						"originalType": "void delegate(Connection)",
						"char": 31,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "PostgresClient",
				"line": 25,
				"comment": "A Postgres client with connection pooling.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 30,
						"comment": "\n",
						"deco": "FAyakDFC4vibe2db10postgresql14Dpq2ConnectionZvZCQBoQBmQBm14PostgresClient",
						"parameters": [
							{
								"name": "connString",
								"deco": "Aya"
							},
							{
								"name": "connNum",
								"deco": "k"
							},
							{
								"name": "afterStartConnectOrReset",
								"deco": "DFC4vibe2db10postgresql14Dpq2ConnectionZv",
								"default": "cast(void delegate(Dpq2Connection))null"
							}
						],
						"endline": 42,
						"originalType": "(string connString, uint connNum, void delegate(Connection) afterStartConnectOrReset = null)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 45,
						"comment": "\n",
						"deco": "FDFNfxS4vibe2db10postgresql14ClientSettingsZCQBmQBkQBk14Dpq2ConnectionySQCnQClQClQCckZCQDcQDaQDa14PostgresClient",
						"parameters": [
							{
								"name": "connFactory",
								"deco": "DFNfxS4vibe2db10postgresql14ClientSettingsZCQBmQBkQBk14Dpq2Connection"
							},
							{
								"name": "cs",
								"deco": "yS4vibe2db10postgresql14ClientSettings"
							},
							{
								"name": "connNum",
								"deco": "k"
							}
						],
						"endline": 55,
						"originalType": "(Connection delegate(in ClientSettings) @safe connFactory, immutable ClientSettings cs, uint connNum)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 58,
						"comment": "\n",
						"deco": "FDxFNaNfZC4vibe2db10postgresql14Dpq2ConnectionkZCQBnQBlQBl14PostgresClient",
						"parameters": [
							{
								"name": "connFactory",
								"deco": "DxFNaNfZC4vibe2db10postgresql14Dpq2Connection"
							},
							{
								"name": "connNum",
								"deco": "k"
							}
						],
						"endline": 66,
						"originalType": "(Connection delegate() const pure @safe connFactory, uint connNum)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "lockConnection",
						"line": 69,
						"comment": "Get connection from the pool.\n",
						"deco": "FZS4vibe4core14connectionpool__T16LockedConnectionTCQBx2db10postgresql14Dpq2ConnectionZQCd",
						"endline": 74,
						"originalType": "LockedConnection()",
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "createConnection",
						"line": 77,
						"comment": "\n",
						"deco": "FNfxS4vibe2db10postgresql14ClientSettingsZCQBmQBkQBk14Dpq2Connection",
						"parameters": [
							{
								"name": "cs",
								"deco": "xS4vibe2db10postgresql14ClientSettings"
							}
						],
						"endline": 80,
						"originalType": "@safe Connection(in ClientSettings cs)",
						"char": 16,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"name": "LockedConnection",
				"line": 87,
				"comment": "\n",
				"deco": "S4vibe4core14connectionpool__T16LockedConnectionTCQBx2db10postgresql14Dpq2ConnectionZQCd",
				"char": 1,
				"kind": "alias"
			},
			{
				"members": [
					{
						"offset": 24,
						"name": "socketTimeout",
						"line": 94,
						"comment": "\n",
						"deco": "S4core4time8Duration",
						"init": "Duration(100000000L)",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "statementTimeout",
						"line": 95,
						"comment": "\n",
						"deco": "S4core4time8Duration",
						"init": "Duration(300000000L)",
						"char": 14,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 100,
						"comment": "\n",
						"deco": "FNeKxS4vibe2db10postgresql14ClientSettingsZCQBmQBkQBk14Dpq2Connection",
						"parameters": [
							{
								"name": "settings",
								"storageClass": [
									"ref"
								],
								"deco": "xS4vibe2db10postgresql14ClientSettings"
							}
						],
						"endline": 112,
						"originalType": "@trusted (ref const ClientSettings settings)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "resetStart",
						"line": 115,
						"comment": "\n",
						"deco": "FZv",
						"endline": 121,
						"char": 19,
						"kind": "function",
						"overrides": [
							"dpq2.connection.Connection.resetStart"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "execStatement",
						"line": 239,
						"comment": "\n",
						"deco": "FAyaE4dpq25value11ValueFormatZyCQBb6result6Answer",
						"parameters": [
							{
								"name": "sqlCommand",
								"deco": "Aya"
							},
							{
								"name": "resultFormat",
								"deco": "E4dpq25value11ValueFormat",
								"default": "cast(ValueFormat)1"
							}
						],
						"endline": 249,
						"originalType": "immutable(Answer)(string sqlCommand, ValueFormat resultFormat = ValueFormat.BINARY)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execStatement",
						"line": 252,
						"comment": "\n",
						"deco": "FKxS4dpq24args11QueryParamsZyCQBa6result6Answer",
						"parameters": [
							{
								"name": "params",
								"storageClass": [
									"ref"
								],
								"deco": "xS4dpq24args11QueryParams"
							}
						],
						"endline": 257,
						"originalType": "immutable(Answer)(ref QueryParams params)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "prepareStatement",
						"line": 260,
						"comment": "\n",
						"deco": "FAyaQdAkZv",
						"parameters": [
							{
								"name": "statementName",
								"deco": "Aya"
							},
							{
								"name": "sqlStatement",
								"deco": "Aya"
							},
							{
								"name": "oids",
								"deco": "Ak",
								"default": "null"
							}
						],
						"endline": 272,
						"originalType": "void(string statementName, string sqlStatement, Oid[] oids = null)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execPreparedStatement",
						"line": 275,
						"comment": "\n",
						"deco": "FKxS4dpq24args11QueryParamsZyCQBa6result6Answer",
						"parameters": [
							{
								"name": "params",
								"storageClass": [
									"ref"
								],
								"deco": "xS4dpq24args11QueryParams"
							}
						],
						"endline": 280,
						"originalType": "immutable(Answer)(ref QueryParams params)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "describePreparedStatement",
						"line": 283,
						"comment": "\n",
						"deco": "FAyaZyC4dpq26result6Answer",
						"parameters": [
							{
								"name": "preparedStatementName",
								"deco": "Aya"
							}
						],
						"endline": 288,
						"char": 23,
						"kind": "function"
					}
				],
				"name": "Dpq2Connection",
				"line": 92,
				"comment": " dpq2.Connection adopted for using with Vibe.d\n",
				"base": "dpq2.connection.Connection",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "PostgresClientTimeoutException",
				"line": 292,
				"comment": "\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": "PostgreSQL database client implementation.\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/args.d",
		"name": "dpq2.args",
		"members": [
			{
				"name": "QueryParams",
				"line": 15,
				"comment": "Query parameters\n",
				"members": [
					{
						"offset": 0,
						"name": "sqlCommand",
						"line": 17,
						"comment": "SQL command\n",
						"deco": "Aya",
						"char": 12,
						"kind": "variable",
						"storageClass": [
							"@safe"
						]
					},
					{
						"offset": 16,
						"name": "resultFormat",
						"line": 18,
						"comment": "Result value format\n",
						"deco": "E4dpq25value11ValueFormat",
						"init": "cast(ValueFormat)1",
						"char": 17,
						"kind": "variable",
						"storageClass": [
							"@safe"
						]
					},
					{
						"endchar": 5,
						"name": "args",
						"line": 22,
						"comment": "SQL command arguments\n",
						"deco": "FNdNfAS4dpq25value5ValueZv",
						"parameters": [
							{
								"name": "vargs",
								"deco": "AS4dpq25value5Value"
							}
						],
						"endline": 25,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "args",
						"line": 28,
						"comment": "ditto\n",
						"deco": "NgFNaNcNdNfZNgAS4dpq25value5Value",
						"endline": 31,
						"char": 35,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "argsFromArray",
						"line": 37,
						"comment": "Fills out arguments from array\n\nUseful for simple text-only query params\nPostgres infers a data type for the parameter in the same way it would do for an untyped literal string.\n",
						"deco": "FNdNfxAAyaZv",
						"parameters": [
							{
								"name": "arr",
								"deco": "xAAya"
							}
						],
						"endline": 43,
						"originalType": "@property @safe void(in string[] arr)",
						"char": 20,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "argsVariadic",
								"line": 46,
								"type": "void(Targs t_args)",
								"parameters": [
									{
										"name": "t_args",
										"type": "Targs"
									}
								],
								"endline": 54,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "argsVariadic",
						"line": 46,
						"comment": "Fills out arguments from variadic arguments\n",
						"parameters": [
							{
								"name": "Targs",
								"kind": "tuple"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"endchar": 73,
						"name": "preparedStatementName",
						"line": 60,
						"comment": "Access to prepared statement name\n\nUse it to prepare queries\n",
						"deco": "xFNdNfZAya",
						"endline": 60,
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 69,
						"name": "preparedStatementName",
						"line": 62,
						"comment": "ditto\n",
						"deco": "FNdNfAyaZv",
						"parameters": [
							{
								"name": "s",
								"deco": "Aya"
							}
						],
						"endline": 62,
						"char": 20,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			}
		],
		"comment": "Dealing with query arguments\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/connection.d",
		"name": "dpq2.connection",
		"members": [
			{
				"name": "ConnectionStart",
				"line": 40,
				"comment": "dumb flag for Connection ctor parametrization\n",
				"members": [],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Connection",
				"line": 43,
				"comment": "Connection\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 53,
						"comment": "Makes a new connection to the database server\n",
						"deco": "FAyaZC4dpq210connection10Connection",
						"parameters": [
							{
								"name": "connString",
								"deco": "Aya"
							}
						],
						"endline": 61,
						"originalType": "(string connString)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 64,
						"comment": "Starts creation of a connection to the database server in a nonblocking manner\n",
						"deco": "FS4dpq210connection15ConnectionStartAyaZCQBnQBl10Connection",
						"parameters": [
							{
								"name": "_param_0",
								"deco": "S4dpq210connection15ConnectionStart"
							},
							{
								"name": "connString",
								"deco": "Aya"
							}
						],
						"endline": 72,
						"originalType": "(ConnectionStart, string connString)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "isNonBlocking",
						"line": 82,
						"comment": "Returns the blocking status of the database connection\n",
						"deco": "FZb",
						"endline": 85,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resetStart",
						"line": 97,
						"comment": "Begin reset the communication channel to the server, in a nonblocking manner\n\nUseful only for non-blocking operations.\n",
						"deco": "FZv",
						"endline": 101,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "poll",
						"line": 104,
						"comment": "Useful only for non-blocking operations.\n",
						"deco": "FNbZi",
						"endline": 109,
						"originalType": "nothrow PostgresPollingStatusType()",
						"char": 31,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resetPoll",
						"line": 112,
						"comment": "Useful only for non-blocking operations.\n",
						"deco": "FNbZi",
						"endline": 117,
						"originalType": "nothrow PostgresPollingStatusType()",
						"char": 31,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "status",
						"line": 120,
						"comment": "Returns the status of the connection\n",
						"deco": "FNbZi",
						"endline": 123,
						"originalType": "nothrow ConnStatusType()",
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "consumeInput",
						"line": 128,
						"comment": "If input is available from the server, consume it\n\nUseful only for non-blocking operations.\n",
						"deco": "FZv",
						"endline": 134,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "posixSocket",
						"line": 146,
						"comment": "Obtains the file descriptor number of the connection socket to the server\n",
						"deco": "FZi",
						"endline": 154,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "posixSocketDuplicate",
						"line": 157,
						"comment": "Obtains duplicate file descriptor number of the connection socket to the server\n",
						"deco": "FZE3std6socket8socket_t",
						"endline": 169,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "socket",
						"line": 175,
						"comment": "Obtains std.socket.Socket of the connection to the server\n\nDue to a limitation of Socket actually for the Socket creation\nduplicate of internal posix socket will be used.\n",
						"deco": "FZC3std6socket6Socket",
						"endline": 178,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "errorMessage",
						"line": 181,
						"comment": "Returns the error message most recently generated by an operation on the connection\n",
						"deco": "xFNbZAya",
						"endline": 184,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setNoticeProcessor",
						"line": 192,
						"comment": " Sets or examines the current notice processor\n\n Returns the previous notice receiver or processor function pointer, and sets the new value.\n If you supply a null function pointer, no action is taken, but the current pointer is returned.\n",
						"deco": "FNbPUNbNiPvPaZvQgZQp",
						"parameters": [
							{
								"name": "proc",
								"deco": "PUNbNiPvPaZv"
							},
							{
								"name": "arg",
								"deco": "Pv"
							}
						],
						"endline": 197,
						"originalType": "nothrow PQnoticeProcessor(PQnoticeProcessor proc, void* arg)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getResult",
						"line": 202,
						"comment": "Get next result after sending a non-blocking commands. Can return null.\n\nUseful only for non-blocking operations.\n",
						"deco": "FZyC4dpq26result6Result",
						"endline": 214,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setSingleRowMode",
						"line": 225,
						"comment": "Select single-row mode for the currently-executing query\n",
						"deco": "FZb",
						"endline": 228,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "cancel",
						"line": 238,
						"comment": "     Try to cancel query\n\n     If the cancellation is effective, the current command will\n     terminate early and return an error result or exception. If the\n     cancellation will fails (say, because the server was already done\n     processing the command) there will be no visible result at all.\n",
						"deco": "FZv",
						"endline": 242,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isBusy",
						"line": 245,
						"comment": "\n",
						"deco": "FNbZb",
						"endline": 250,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "parameterStatus",
						"line": 253,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "paramName",
								"deco": "Aya"
							}
						],
						"endline": 263,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "escapeLiteral",
						"line": 266,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							}
						],
						"endline": 280,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "escapeIdentifier",
						"line": 283,
						"comment": "\n",
						"deco": "FAyaZQe",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							}
						],
						"endline": 297,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "dbName",
						"line": 300,
						"comment": "\n",
						"deco": "xFNbZAya",
						"endline": 305,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "host",
						"line": 308,
						"comment": "\n",
						"deco": "xFNbZAya",
						"endline": 313,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "protocolVersion",
						"line": 316,
						"comment": "\n",
						"deco": "xFNbZi",
						"endline": 321,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "serverVersion",
						"line": 324,
						"comment": "\n",
						"deco": "xFNbZi",
						"endline": 329,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "trace",
						"line": 332,
						"comment": "\n",
						"deco": "FKS3std5stdio4FileZv",
						"parameters": [
							{
								"name": "stream",
								"storageClass": [
									"ref"
								],
								"deco": "S3std5stdio4File"
							}
						],
						"endline": 335,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "untrace",
						"line": 338,
						"comment": "\n",
						"deco": "FZv",
						"endline": 341,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "setClientEncoding",
						"line": 344,
						"comment": "\n",
						"deco": "FAyaZv",
						"parameters": [
							{
								"name": "encoding",
								"deco": "Aya"
							}
						],
						"endline": 348,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "connStringCheck",
				"line": 354,
				"comment": "Check connection options in the provided connection string\n\nThrows exception if connection string isn't passes check.\n",
				"deco": "FAyaZv",
				"parameters": [
					{
						"name": "connString",
						"deco": "Aya"
					}
				],
				"endline": 375,
				"char": 6,
				"kind": "function"
			},
			{
				"name": "Cancellation",
				"line": 394,
				"comment": "Represents query cancellation process\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 399,
						"comment": "\n",
						"deco": "FC4dpq210connection10ConnectionZCQBfQBd12Cancellation",
						"parameters": [
							{
								"name": "c",
								"deco": "C4dpq210connection10Connection"
							}
						],
						"endline": 405,
						"originalType": "(Connection c)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "~this",
						"line": 408,
						"comment": "\n",
						"deco": "FZv",
						"endline": 411,
						"char": 5,
						"kind": "destructor"
					},
					{
						"endchar": 5,
						"name": "doCancel",
						"line": 425,
						"comment": "     Requests that the server abandon processing of the current command\n\n     Throws exception if cancel request was not successfully dispatched.\n\n     Successful dispatch is no guarantee that the request will have any\n     effect, however. If the cancellation is effective, the current\n     command will terminate early and return an error result\n     (exception). If the cancellation fails (say, because the server\n     was already done processing the command), then there will be no\n     visible result at all.\n",
						"deco": "FZv",
						"endline": 432,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "CancellationException",
				"line": 436,
				"comment": "\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "ConnectionException",
				"line": 445,
				"comment": "Connection exception\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " Represents connection to the PostgreSQL server\n\n Most functions is correspond to those in the documentation of Postgres:\n $(HTTPS https://www.postgresql.org/docs/current/static/libpq.html)\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/from_bson.d",
		"name": "dpq2.conv.from_bson",
		"members": [
			{
				"endchar": 1,
				"name": "bsonToValue",
				"line": 14,
				"comment": "Default type will be used for NULL value and for array without detected type\n",
				"deco": "FS4vibe4data4bson4BsonE4dpq24oids7OidTypeZSQu5value5Value",
				"parameters": [
					{
						"name": "v",
						"deco": "S4vibe4data4bson4Bson"
					},
					{
						"name": "defaultType",
						"deco": "E4dpq24oids7OidType",
						"default": "cast(OidType)0u"
					}
				],
				"endline": 20,
				"originalType": "Value(Bson v, OidType defaultType = OidType.Undefined)",
				"char": 7,
				"kind": "function"
			}
		],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/from_d_types.d",
		"name": "dpq2.conv.from_d_types",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 17,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 24,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 17,
				"comment": "Converts Nullable!T to Value\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == Nullable!R, R)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 27,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 31,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 27,
				"comment": "\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "isNumeric!T",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 34,
						"type": "@trusted Value(T v, ValueFormat valueFormat = ValueFormat.BINARY)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							},
							{
								"name": "valueFormat",
								"type": "ValueFormat",
								"default": "ValueFormat.BINARY"
							}
						],
						"endline": 42,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 34,
				"comment": "\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == string)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 45,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 49,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 45,
				"comment": "\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == ubyte[])",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 52,
						"type": "@trusted Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 60,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 52,
				"comment": "\n",
				"parameters": [
					{
						"name": "T",
						"deco": "b",
						"kind": "type"
					}
				],
				"constraint": "!is(T == Nullable!R, R)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 63,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 84,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 63,
				"comment": "Constructs Value from Date\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(Unqual!T == Date)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 87,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 93,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 87,
				"comment": "Constructs Value from TimeOfDay\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(Unqual!T == TimeOfDay)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 96,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 108,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 96,
				"comment": "Constructs Value from TimeStamp or from TimeStampUTC\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(Unqual!T == TimeStamp) || is(Unqual!T == TimeStampUTC)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 114,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 118,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 114,
				"comment": "    Constructs Value from DateTime\n    It uses Timestamp without TZ as a resulting PG type\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(Unqual!T == DateTime)",
				"char": 7,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "toValue",
						"line": 126,
						"type": "Value(T v)",
						"parameters": [
							{
								"name": "v",
								"type": "T"
							}
						],
						"endline": 132,
						"char": 7,
						"kind": "function"
					}
				],
				"name": "toValue",
				"line": 126,
				"comment": "    Constructs Value from SysTime\n    Note that SysTime has a precision in hnsecs and PG TimeStamp in usecs.\n    It means that PG value will have 10 times lower precision.\n    And as both types are using long for internal storage it also means that PG TimeStamp can store greater range of values than SysTime.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(Unqual!T == SysTime)",
				"char": 7,
				"kind": "template"
			}
		],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/jsonb.d",
		"name": "dpq2.conv.jsonb",
		"members": [],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/time.d",
		"name": "dpq2.conv.time",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 31,
						"type": "@trusted SysTime(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 43,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 31,
				"comment": "    Returns value timestamp with time zone as SysTime\n\n    Note that SysTime has a precision in hnsecs and PG TimeStamp in usecs.\n    It means that PG value will have 10 times lower precision.\n    And as both types are using long for internal storage it also means that PG TimeStamp can store greater range of values than SysTime.\n\n    Because of these differences, it can happen that database value will not fit to the SysTime range of values.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == SysTime)",
				"char": 9,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 48,
						"type": "@trusted Date(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 63,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 48,
				"comment": "Returns value data as native Date\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == Date)",
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 66,
						"type": "@trusted TimeOfDay(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 77,
						"char": 11,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 66,
				"comment": "Returns value time without time zone as native TimeOfDay\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeOfDay)",
				"char": 11,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 80,
						"type": "@trusted TimeStamp(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 93,
						"char": 11,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 80,
				"comment": "Returns value timestamp without time zone as TimeStamp\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeStamp)",
				"char": 11,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 96,
						"type": "@trusted TimeStampUTC(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 109,
						"char": 14,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 96,
				"comment": "Returns value timestamp with time zone as TimeStampUTC\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == TimeStampUTC)",
				"char": 14,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "binaryValueAs",
						"line": 112,
						"type": "@trusted DateTime(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 116,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "binaryValueAs",
				"line": 112,
				"comment": "Returns value timestamp without time zone as DateTime (it drops the fracSecs from the database value)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == DateTime)",
				"char": 10,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "TTimeStamp",
						"line": 121,
						"members": [
							{
								"name": "dateTime",
								"line": 123,
								"comment": "date and time of TimeStamp\n",
								"type": "DateTime",
								"char": 14,
								"kind": "variable"
							},
							{
								"name": "fracSec",
								"line": 124,
								"comment": "fractional seconds\n",
								"type": "Duration",
								"char": 14,
								"kind": "variable"
							},
							{
								"endchar": 5,
								"name": "max",
								"line": 137,
								"comment": "Returns the TimeStamp farthest in the future which is representable by TimeStamp.\n",
								"type": "()",
								"endline": 140,
								"char": 12,
								"kind": "function",
								"storageClass": [
									"static"
								]
							},
							{
								"endchar": 5,
								"name": "min",
								"line": 143,
								"comment": "Returns the TimeStamp farthest in the past which is representable by TimeStamp.\n",
								"type": "()",
								"endline": 146,
								"char": 12,
								"kind": "function",
								"storageClass": [
									"static"
								]
							},
							{
								"endchar": 5,
								"name": "toString",
								"line": 149,
								"comment": "\n",
								"type": "const string()",
								"endline": 152,
								"char": 12,
								"kind": "function"
							}
						],
						"char": 1,
						"kind": "struct"
					}
				],
				"name": "TTimeStamp",
				"line": 121,
				"comment": "    Structure to represent PostgreSQL Timestamp with/without time zone\n",
				"parameters": [
					{
						"name": "isWithTZ",
						"deco": "b",
						"kind": "value"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"name": "TimeStamp",
				"line": 155,
				"comment": "Unknown TZ timestamp\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi0ZQr",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "TimeStampUTC",
				"line": 156,
				"comment": "Assumed that this is UTC timestamp\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi1ZQr",
				"char": 1,
				"kind": "alias"
			}
		],
		"comment": "   PostgreSQL time types binary format.\n\n   Copyright: © 2014 DSoftOut\n   Authors: NCrashed <ncrashed@gmail.com>\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/to_bson.d",
		"name": "dpq2.conv.to_bson",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "as",
						"line": 16,
						"type": "Bson(in Value v, immutable TimeZone tz = null)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							},
							{
								"name": "tz",
								"type": "TimeZone",
								"storageClass": [
									"immutable"
								],
								"default": "null"
							}
						],
						"endline": 30,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "as",
				"line": 16,
				"comment": "\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == Bson)",
				"char": 6,
				"kind": "template"
			}
		],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/conv/to_d_types.d",
		"name": "dpq2.conv.to_d_types",
		"members": [
			{
				"name": "PGboolean",
				"line": 26,
				"comment": "boolean\n",
				"deco": "b",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGsmallint",
				"line": 27,
				"comment": "smallint\n",
				"deco": "s",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGinteger",
				"line": 28,
				"comment": "integer\n",
				"deco": "i",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGbigint",
				"line": 29,
				"comment": "bigint\n",
				"deco": "l",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGreal",
				"line": 30,
				"comment": "real\n",
				"deco": "f",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGdouble_precision",
				"line": 31,
				"comment": "double precision\n",
				"deco": "d",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGtext",
				"line": 32,
				"comment": "text\n",
				"deco": "Aya",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGnumeric",
				"line": 33,
				"comment": "numeric represented as string\n",
				"deco": "Aya",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGbytea",
				"line": 34,
				"comment": "bytea\n",
				"deco": "xAh",
				"char": 1,
				"kind": "alias",
				"storageClass": [
					"const"
				]
			},
			{
				"name": "PGuuid",
				"line": 35,
				"comment": "UUID\n",
				"deco": "S3std4uuid4UUID",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGdate",
				"line": 36,
				"comment": "Date (no time of day)\n",
				"deco": "S3std8datetime4date4Date",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGtime_without_time_zone",
				"line": 37,
				"comment": "Time of day (no date)\n",
				"deco": "S3std8datetime4date9TimeOfDay",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGtimestamp",
				"line": 38,
				"comment": "Both date and time without time zone\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi0ZQr",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGtimestamptz",
				"line": 39,
				"comment": "Both date and time stored in UTC time zone\n",
				"deco": "S4dpq24conv4time__T10TTimeStampVbi1ZQr",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "PGjson",
				"line": 40,
				"comment": "json or jsonb\n",
				"deco": "S4vibe4data4json4Json",
				"char": 1,
				"kind": "alias"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "as",
						"line": 56,
						"type": "pure @trusted string(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 76,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "as",
				"line": 56,
				"comment": "Returns cell value as native string type from text or binary formatted field\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "is(T == string)",
				"char": 8,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "as",
						"line": 79,
						"type": "T(in Value v)",
						"parameters": [
							{
								"name": "v",
								"type": "Value",
								"storageClass": [
									"in"
								]
							}
						],
						"endline": 92,
						"char": 3,
						"kind": "function"
					}
				],
				"name": "as",
				"line": 79,
				"comment": "Returns value as D type value from binary formatted field\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"constraint": "!is(T == string) && !is(T == Bson)",
				"char": 3,
				"kind": "template"
			}
		],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/exception.d",
		"name": "dpq2.exception",
		"members": [
			{
				"members": [],
				"name": "Dpq2Exception",
				"line": 5,
				"comment": "Base for all dpq2 exceptions classes\n",
				"base": "object.Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": "\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/oids.d",
		"name": "dpq2.oids",
		"members": [
			{
				"members": [
					{
						"endchar": 1,
						"name": "oidConvTo",
						"line": 25,
						"type": "OidType(OidType type)",
						"parameters": [
							{
								"name": "type",
								"type": "OidType"
							}
						],
						"endline": 52,
						"char": 9,
						"kind": "function"
					}
				],
				"name": "oidConvTo",
				"line": 25,
				"comment": " Convert between array Oid and element Oid or vice versa\n\n Params:\n  s = \"array\" or \"element\"\n",
				"parameters": [
					{
						"name": "s",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 9,
				"kind": "template"
			},
			{
				"endchar": 1,
				"name": "isNativeInteger",
				"line": 55,
				"comment": "Checks if Oid type can be mapped to native D integer\n",
				"deco": "FNaNfE4dpq24oids7OidTypeZb",
				"parameters": [
					{
						"name": "t",
						"deco": "E4dpq24oids7OidType"
					}
				],
				"endline": 69,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "isNativeFloat",
				"line": 72,
				"comment": "Checks if Oid type can be mapped to native D float\n",
				"deco": "FNaNfE4dpq24oids7OidTypeZb",
				"parameters": [
					{
						"name": "t",
						"deco": "E4dpq24oids7OidType"
					}
				],
				"endline": 85,
				"char": 6,
				"kind": "function"
			},
			{
				"members": [
					{
						"name": "Undefined",
						"line": 186,
						"value": "0u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Bool",
						"line": 188,
						"value": "16u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "ByteArray",
						"line": 189,
						"value": "17u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Char",
						"line": 190,
						"value": "18u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Name",
						"line": 191,
						"value": "19u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int8",
						"line": 192,
						"value": "20u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int2",
						"line": 193,
						"value": "21u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int2Vector",
						"line": 194,
						"value": "22u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int4",
						"line": 195,
						"value": "23u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegProc",
						"line": 196,
						"value": "24u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Text",
						"line": 197,
						"value": "25u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Oid",
						"line": 198,
						"value": "26u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Tid",
						"line": 199,
						"value": "27u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Xid",
						"line": 200,
						"value": "28u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Cid",
						"line": 201,
						"value": "29u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "OidVector",
						"line": 202,
						"value": "30u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AccessControlList",
						"line": 204,
						"value": "1033u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TypeCatalog",
						"line": 205,
						"value": "71u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AttributeCatalog",
						"line": 206,
						"value": "75u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "ProcCatalog",
						"line": 207,
						"value": "81u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "ClassCatalog",
						"line": 208,
						"value": "83u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Json",
						"line": 210,
						"value": "114u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Jsonb",
						"line": 211,
						"value": "3802u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Xml",
						"line": 212,
						"value": "142u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NodeTree",
						"line": 213,
						"value": "194u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "StorageManager",
						"line": 214,
						"value": "210u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Point",
						"line": 216,
						"value": "600u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "LineSegment",
						"line": 217,
						"value": "601u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Path",
						"line": 218,
						"value": "602u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Box",
						"line": 219,
						"value": "603u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Polygon",
						"line": 220,
						"value": "604u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Line",
						"line": 221,
						"value": "628u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Float4",
						"line": 223,
						"value": "700u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Float8",
						"line": 224,
						"value": "701u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AbsTime",
						"line": 225,
						"value": "702u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RelTime",
						"line": 226,
						"value": "703u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Interval",
						"line": 227,
						"value": "704u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Unknown",
						"line": 228,
						"value": "705u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Circle",
						"line": 230,
						"value": "718u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Money",
						"line": 231,
						"value": "790u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "MacAddress",
						"line": 232,
						"value": "829u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "HostAddress",
						"line": 233,
						"value": "869u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NetworkAddress",
						"line": 234,
						"value": "650u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "FixedString",
						"line": 236,
						"value": "1042u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "VariableString",
						"line": 237,
						"value": "1043u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Date",
						"line": 239,
						"value": "1082u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Time",
						"line": 240,
						"value": "1083u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStamp",
						"line": 241,
						"value": "1114u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampWithZone",
						"line": 242,
						"value": "1184u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeInterval",
						"line": 243,
						"value": "1186u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeWithZone",
						"line": 244,
						"value": "1266u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "FixedBitString",
						"line": 246,
						"value": "1560u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "VariableBitString",
						"line": 247,
						"value": "1562u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Numeric",
						"line": 249,
						"value": "1700u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RefCursor",
						"line": 250,
						"value": "1790u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegProcWithArgs",
						"line": 251,
						"value": "2202u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegOperator",
						"line": 252,
						"value": "2203u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegOperatorWithArgs",
						"line": 253,
						"value": "2204u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegClass",
						"line": 254,
						"value": "2205u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegType",
						"line": 255,
						"value": "2206u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "UUID",
						"line": 257,
						"value": "2950u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TSVector",
						"line": 258,
						"value": "3614u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "GTSVector",
						"line": 259,
						"value": "3642u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TSQuery",
						"line": 260,
						"value": "3615u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegConfig",
						"line": 261,
						"value": "3734u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegDictionary",
						"line": 262,
						"value": "3769u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TXidSnapshot",
						"line": 263,
						"value": "2970u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int4Range",
						"line": 265,
						"value": "3904u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NumRange",
						"line": 266,
						"value": "3906u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampRange",
						"line": 267,
						"value": "3908u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampWithZoneRange",
						"line": 268,
						"value": "3910u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "DateRange",
						"line": 269,
						"value": "3912u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int8Range",
						"line": 270,
						"value": "3926u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "XmlArray",
						"line": 273,
						"value": "143u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "JsonArray",
						"line": 274,
						"value": "3807u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "JsonbArray",
						"line": 275,
						"value": "199u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "BoolArray",
						"line": 276,
						"value": "1000u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "ByteArrayArray",
						"line": 277,
						"value": "1001u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "CharArray",
						"line": 278,
						"value": "1002u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NameArray",
						"line": 279,
						"value": "1003u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int2Array",
						"line": 280,
						"value": "1005u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int2VectorArray",
						"line": 281,
						"value": "1006u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int4Array",
						"line": 282,
						"value": "1007u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegProcArray",
						"line": 283,
						"value": "1008u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TextArray",
						"line": 284,
						"value": "1009u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "OidArray",
						"line": 285,
						"value": "1028u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TidArray",
						"line": 286,
						"value": "1010u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "XidArray",
						"line": 287,
						"value": "1011u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "CidArray",
						"line": 288,
						"value": "1012u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "OidVectorArray",
						"line": 289,
						"value": "1013u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "FixedStringArray",
						"line": 290,
						"value": "1014u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "VariableStringArray",
						"line": 291,
						"value": "1015u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int8Array",
						"line": 292,
						"value": "1016u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "PointArray",
						"line": 293,
						"value": "1017u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "LineSegmentArray",
						"line": 294,
						"value": "1018u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "PathArray",
						"line": 295,
						"value": "1019u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "BoxArray",
						"line": 296,
						"value": "1020u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Float4Array",
						"line": 297,
						"value": "1021u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Float8Array",
						"line": 298,
						"value": "1022u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AbsTimeArray",
						"line": 299,
						"value": "1023u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RelTimeArray",
						"line": 300,
						"value": "1024u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "IntervalArray",
						"line": 301,
						"value": "1025u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "PolygonArray",
						"line": 302,
						"value": "1027u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AccessControlListArray",
						"line": 303,
						"value": "1034u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "MacAddressArray",
						"line": 304,
						"value": "1040u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "HostAdressArray",
						"line": 305,
						"value": "1041u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NetworkAdressArray",
						"line": 306,
						"value": "651u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "CStringArray",
						"line": 307,
						"value": "1263u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampArray",
						"line": 308,
						"value": "1115u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "DateArray",
						"line": 309,
						"value": "1182u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeArray",
						"line": 310,
						"value": "1183u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampWithZoneArray",
						"line": 311,
						"value": "1185u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeIntervalArray",
						"line": 312,
						"value": "1187u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NumericArray",
						"line": 313,
						"value": "1231u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeWithZoneArray",
						"line": 314,
						"value": "1270u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "FixedBitStringArray",
						"line": 315,
						"value": "1561u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "VariableBitStringArray",
						"line": 316,
						"value": "1563u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RefCursorArray",
						"line": 317,
						"value": "2201u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegProcWithArgsArray",
						"line": 318,
						"value": "2207u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegOperatorArray",
						"line": 319,
						"value": "2208u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegOperatorWithArgsArray",
						"line": 320,
						"value": "2209u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegClassArray",
						"line": 321,
						"value": "2210u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegTypeArray",
						"line": 322,
						"value": "2211u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "UUIDArray",
						"line": 323,
						"value": "2951u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TSVectorArray",
						"line": 324,
						"value": "3643u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "GTSVectorArray",
						"line": 325,
						"value": "3644u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TSQueryArray",
						"line": 326,
						"value": "3645u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegConfigArray",
						"line": 327,
						"value": "3735u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RegDictionaryArray",
						"line": 328,
						"value": "3770u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TXidSnapshotArray",
						"line": 329,
						"value": "2949u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int4RangeArray",
						"line": 330,
						"value": "3905u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NumRangeArray",
						"line": 331,
						"value": "3907u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampRangeArray",
						"line": 332,
						"value": "3909u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "TimeStampWithZoneRangeArray",
						"line": 333,
						"value": "3911u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "DateRangeArray",
						"line": 334,
						"value": "3913u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Int8RangeArray",
						"line": 335,
						"value": "3927u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Record",
						"line": 338,
						"value": "2249u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "RecordArray",
						"line": 339,
						"value": "2287u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "CString",
						"line": 340,
						"value": "2275u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyVoid",
						"line": 341,
						"value": "2276u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyArray",
						"line": 342,
						"value": "2277u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Void",
						"line": 343,
						"value": "2278u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Trigger",
						"line": 344,
						"value": "2279u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "EventTrigger",
						"line": 345,
						"value": "3838u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "LanguageHandler",
						"line": 346,
						"value": "2280u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Internal",
						"line": 347,
						"value": "2281u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "Opaque",
						"line": 348,
						"value": "2282u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyElement",
						"line": 349,
						"value": "2283u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyNoArray",
						"line": 350,
						"value": "2776u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyEnum",
						"line": 351,
						"value": "3500u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "FDWHandler",
						"line": 352,
						"value": "3115u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "AnyRange",
						"line": 353,
						"value": "3831u",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "OidType",
				"line": 184,
				"comment": "Enum of Oid types defined in PG\n",
				"baseDeco": "k",
				"char": 8,
				"kind": "enum"
			}
		],
		"comment": "   PostgreSQL major types oids.\n\n   Copyright: © 2014 DSoftOut\n   Authors: NCrashed <ncrashed@gmail.com>\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/package.d",
		"name": "dpq2",
		"members": [],
		"comment": " Main module\n\n Include it to use common functions.\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/query.d",
		"name": "dpq2.query",
		"members": [
			{
				"members": [
					{
						"endchar": 5,
						"name": "exec",
						"line": 20,
						"comment": "Perform SQL query to DB\n",
						"type": "immutable(Answer)(string SQLcmd)",
						"parameters": [
							{
								"name": "SQLcmd",
								"type": "string"
							}
						],
						"endline": 28,
						"char": 24,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execParams",
						"line": 31,
						"comment": "Perform SQL query to DB\n",
						"type": "immutable(Answer)(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 49,
						"char": 24,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQuery",
						"line": 52,
						"comment": "Submits a command to the server without waiting for the result(s)\n",
						"type": "void(string SQLcmd)",
						"parameters": [
							{
								"name": "SQLcmd",
								"type": "string"
							}
						],
						"endline": 56,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQueryParams",
						"line": 59,
						"comment": "Submits a command and separate parameters to the server without waiting for the result(s)\n",
						"type": "void(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 74,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendQueryPrepared",
						"line": 77,
						"comment": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)\n",
						"type": "void(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 91,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getNextNotify",
						"line": 94,
						"comment": "Returns null if no notifies was received\n",
						"type": "Notify()",
						"endline": 99,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "prepare",
						"line": 103,
						"comment": "Submits a request to create a prepared statement with the given parameters, and waits for completion.\nReturns: Result of query preparing\n",
						"type": "immutable(Result)(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 117,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "prepareEx",
						"line": 122,
						"comment": "Submits a request to create a prepared statement with the given parameters, and waits for completion.\n\nThrows an exception if preparing failed.\n",
						"type": "void(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 128,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "execPrepared",
						"line": 131,
						"comment": "Submits a request to execute a prepared statement with given parameters, and waits for completion.\n",
						"type": "immutable(Answer)(ref QueryParams qp)",
						"parameters": [
							{
								"name": "qp",
								"type": "QueryParams",
								"storageClass": [
									"in",
									"ref"
								]
							}
						],
						"endline": 148,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendPrepare",
						"line": 151,
						"comment": "Sends a request to create a prepared statement with the given parameters, without waiting for completion.\n",
						"type": "void(string statementName, string sqlStatement, in Oid[] oids = null)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							},
							{
								"name": "sqlStatement",
								"type": "string"
							},
							{
								"name": "oids",
								"type": "Oid[]",
								"storageClass": [
									"in"
								],
								"default": "null"
							}
						],
						"endline": 162,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "describePrepared",
						"line": 165,
						"comment": "Submits a request to obtain information about the specified prepared statement, and waits for completion.\n",
						"type": "immutable(Answer)(string statementName)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							}
						],
						"endline": 173,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "sendDescribePrepared",
						"line": 176,
						"comment": "Submits a request to obtain information about the specified prepared statement, without waiting for completion.\n",
						"type": "void(string statementName)",
						"parameters": [
							{
								"name": "statementName",
								"type": "string"
							}
						],
						"endline": 181,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "Queries",
				"line": 17,
				"comment": "Extends Connection by adding query methods\n\nJust use it as Connection.* methods.\n",
				"parameters": [],
				"char": 7,
				"kind": "template"
			}
		],
		"comment": "Query methods\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/result.d",
		"name": "dpq2.result",
		"members": [
			{
				"name": "Result",
				"line": 56,
				"comment": "Contains result of query regardless of whether it contains an error or data answer\n",
				"members": [
					{
						"endchar": 5,
						"name": "status",
						"line": 66,
						"comment": "Returns the result status of the command.\n",
						"deco": "yFNbZi",
						"endline": 69,
						"originalType": "immutable nothrow ExecStatusType()",
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "statusString",
						"line": 72,
						"comment": "Text description of result status.\n",
						"deco": "yFZAya",
						"endline": 75,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resultErrorMessage",
						"line": 78,
						"comment": "Returns the error message associated with the command, or an empty string if there was no error.\n",
						"deco": "yFZAya",
						"endline": 81,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "resultErrorField",
						"line": 84,
						"comment": "Returns an individual field of an error report.\n",
						"deco": "yFiZAya",
						"parameters": [
							{
								"name": "fieldcode",
								"deco": "i"
							}
						],
						"endline": 87,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getAnswer",
						"line": 90,
						"comment": "Creates Answer object\n",
						"deco": "yFZyC4dpq26result6Answer",
						"endline": 93,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 96,
						"comment": "\n",
						"deco": "yFZAya",
						"endline": 103,
						"char": 12,
						"kind": "function"
					}
				],
				"char": 11,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "cmdStatus",
						"line": 134,
						"comment": " Returns the command status tag from the SQL command that generated the PGresult\n Commonly this is just the name of the command, but it might include\n additional data such as the number of rows processed.\n",
						"deco": "yFZAya",
						"endline": 137,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "cmdTuples",
						"line": 147,
						"comment": " Returns the number of rows affected by the SQL command.\n This function returns a string containing the number of rows affected by the SQL statement\n that generated the Answer. This function can only be used following the execution of\n a SELECT, CREATE TABLE AS, INSERT, UPDATE, DELETE, MOVE, FETCH, or COPY statement,\n or an EXECUTE of a prepared query that contains an INSERT, UPDATE, or DELETE statement.\n If the command that generated the Anser was anything else, cmdTuples returns an empty string.\n",
						"deco": "yFZAya",
						"endline": 150,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 57,
						"name": "length",
						"line": 153,
						"comment": "Returns row count\n",
						"deco": "yFNbZm",
						"endline": 153,
						"originalType": "immutable nothrow size_t()",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 62,
						"name": "columnCount",
						"line": 156,
						"comment": "Returns column count\n",
						"deco": "yFNbZm",
						"endline": 156,
						"originalType": "immutable nothrow size_t()",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnFormat",
						"line": 159,
						"comment": "Returns column format\n",
						"deco": "yFxmZE4dpq25value11ValueFormat",
						"parameters": [
							{
								"name": "colNum",
								"deco": "xm"
							}
						],
						"endline": 164,
						"originalType": "immutable ValueFormat(const size_t colNum)",
						"char": 17,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "OID",
						"line": 167,
						"comment": "Returns column Oid\n",
						"deco": "yFmZE4dpq24oids7OidType",
						"parameters": [
							{
								"name": "colNum",
								"deco": "m"
							}
						],
						"endline": 172,
						"originalType": "immutable OidType(size_t colNum)",
						"char": 13,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isArray",
						"line": 175,
						"comment": "Checks if column type is array\n",
						"deco": "yFxmZb",
						"parameters": [
							{
								"name": "colNum",
								"deco": "xm"
							}
						],
						"endline": 180,
						"originalType": "immutable bool(const size_t colNum)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnNum",
						"line": 184,
						"comment": "Returns column number by field name\n",
						"deco": "yFAyaZm",
						"parameters": [
							{
								"name": "columnName",
								"deco": "Aya"
							}
						],
						"endline": 193,
						"originalType": "immutable size_t(string columnName)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnName",
						"line": 196,
						"comment": "Returns column name by field number\n",
						"deco": "yFxmZAya",
						"parameters": [
							{
								"name": "colNum",
								"deco": "xm"
							}
						],
						"endline": 208,
						"originalType": "immutable string(in size_t colNum)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnExists",
						"line": 211,
						"comment": "Returns true if the column exists, false if not\n",
						"deco": "yFAyaZb",
						"parameters": [
							{
								"name": "columnName",
								"deco": "Aya"
							}
						],
						"endline": 216,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opIndex",
						"line": 219,
						"comment": "Returns row of cells\n",
						"deco": "yFxmZyS4dpq26result3Row",
						"parameters": [
							{
								"name": "row",
								"deco": "xm"
							}
						],
						"endline": 222,
						"originalType": "immutable immutable(Row)(in size_t row)",
						"char": 21,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "nParams",
						"line": 229,
						"comment": "     Returns the number of parameters of a prepared statement.\n     This function is only useful when inspecting the result of describePrepared.\n     For other types of queries it will return zero.\n",
						"deco": "yFZk",
						"endline": 232,
						"char": 10,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "paramType",
								"line": 240,
								"type": "OidType(T paramNum)",
								"parameters": [
									{
										"name": "paramNum",
										"type": "T"
									}
								],
								"endline": 243,
								"char": 13,
								"kind": "function"
							}
						],
						"name": "paramType",
						"line": 240,
						"comment": "     Returns the data type of the indicated statement parameter.\n     Parameter numbers start at 0.\n     This function is only useful when inspecting the result of describePrepared.\n     For other types of queries it will return zero.\n",
						"parameters": [
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 13,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 246,
						"comment": "\n",
						"deco": "yFZAya",
						"endline": 261,
						"char": 21,
						"kind": "function",
						"overrides": [
							"dpq2.result.Result.toString"
						],
						"storageClass": [
							"override"
						]
					}
				],
				"name": "Answer",
				"line": 107,
				"comment": "Contains result of query with valid data answer\n",
				"base": "dpq2.result.Result",
				"char": 11,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "rangify",
						"line": 291,
						"type": "(T obj)",
						"parameters": [
							{
								"name": "obj",
								"type": "T"
							}
						],
						"endline": 311,
						"char": 6,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "rangify",
				"line": 291,
				"comment": "Creates forward range from immutable Answer\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "Row",
				"line": 314,
				"comment": "Represents one row from the answer table\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 320,
						"comment": "\n",
						"deco": "yFNcyC4dpq26result6AnswerxmZySQyQv3Row",
						"parameters": [
							{
								"name": "answer",
								"deco": "yC4dpq26result6Answer"
							},
							{
								"name": "row",
								"deco": "xm"
							}
						],
						"endline": 326,
						"originalType": "immutable ref (immutable Answer answer, in size_t row)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "size",
						"line": 329,
						"comment": "Returns the actual length of a cell value in bytes.\n",
						"deco": "yFxmZm",
						"parameters": [
							{
								"name": "col",
								"deco": "xm"
							}
						],
						"endline": 334,
						"originalType": "immutable size_t(const size_t col)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isNULL",
						"line": 339,
						"comment": "Checks if value is NULL\n\nDo not confuse it with Nullable's isNull method\n",
						"deco": "yFxmZb",
						"parameters": [
							{
								"name": "col",
								"deco": "xm"
							}
						],
						"endline": 344,
						"originalType": "immutable bool(const size_t col)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opIndex",
						"line": 347,
						"comment": "Returns cell value by column number\n",
						"deco": "yFxmZyS4dpq25value5Value",
						"parameters": [
							{
								"name": "col",
								"deco": "xm"
							}
						],
						"endline": 361,
						"originalType": "immutable immutable(Value)(in size_t col)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opIndex",
						"line": 364,
						"comment": "Returns cell value by field name\n",
						"deco": "yFxAyaZyS4dpq25value5Value",
						"parameters": [
							{
								"name": "column",
								"deco": "xAya"
							}
						],
						"endline": 367,
						"originalType": "immutable immutable(Value)(in string column)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnNum",
						"line": 370,
						"comment": "Returns column number by field name\n",
						"deco": "yFAyaZm",
						"parameters": [
							{
								"name": "columnName",
								"deco": "Aya"
							}
						],
						"endline": 373,
						"originalType": "immutable size_t(string columnName)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "columnName",
						"line": 376,
						"comment": "Returns column name by field number\n",
						"deco": "yFxmZAya",
						"parameters": [
							{
								"name": "colNum",
								"deco": "xm"
							}
						],
						"endline": 379,
						"originalType": "immutable string(in size_t colNum)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 52,
						"name": "length",
						"line": 382,
						"comment": "Returns column count\n",
						"deco": "yFZm",
						"endline": 382,
						"originalType": "immutable size_t()",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 385,
						"comment": "\n",
						"deco": "yFZAya",
						"endline": 393,
						"char": 12,
						"kind": "function"
					}
				],
				"char": 11,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "asArray",
				"line": 397,
				"comment": "Creates Array from appropriate Value\n",
				"deco": "FyS4dpq25value5ValueZySQu6result5Array",
				"parameters": [
					{
						"name": "v",
						"deco": "yS4dpq25value5Value"
					}
				],
				"endline": 412,
				"char": 19,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "toString",
				"line": 415,
				"comment": "\n",
				"deco": "FyS4dpq25value5ValueZAya",
				"parameters": [
					{
						"name": "v",
						"deco": "yS4dpq25value5Value"
					}
				],
				"endline": 420,
				"originalType": "string(immutable Value v)",
				"char": 8,
				"kind": "function"
			},
			{
				"name": "ArrayProperties",
				"line": 436,
				"comment": "\n",
				"members": [
					{
						"offset": 0,
						"name": "OID",
						"line": 438,
						"comment": "Oid\n",
						"deco": "E4dpq24oids7OidType",
						"init": "cast(OidType)0u",
						"char": 13,
						"kind": "variable"
					},
					{
						"offset": 8,
						"name": "dimsSize",
						"line": 439,
						"comment": "Dimensions sizes info\n",
						"deco": "Ai",
						"char": 11,
						"kind": "variable"
					},
					{
						"offset": 24,
						"name": "nElems",
						"line": 440,
						"comment": "Total elements\n",
						"deco": "m",
						"originalType": "size_t",
						"char": 12,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Array",
				"line": 493,
				"comment": "Represents Value as array\n\nActually it is a reference to the cell value of the answer table\n",
				"members": [
					{
						"offset": 0,
						"name": "ap",
						"line": 495,
						"comment": "\n",
						"deco": "yS4dpq26result15ArrayProperties",
						"originalType": "ArrayProperties",
						"char": 21,
						"kind": "variable",
						"storageClass": [
							"immutable"
						]
					},
					{
						"endchar": 5,
						"name": "length",
						"line": 542,
						"comment": "Returns number of elements in array\nUseful for one-dimensional arrays\n",
						"deco": "yFZm",
						"endline": 545,
						"originalType": "immutable size_t()",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opIndex",
						"line": 549,
						"comment": "Returns Value struct by index\nUseful for one-dimensional arrays\n",
						"deco": "yFmZyS4dpq25value5Value",
						"parameters": [
							{
								"name": "n",
								"deco": "m"
							}
						],
						"endline": 552,
						"originalType": "immutable immutable(Value)(size_t n)",
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opIndex",
						"line": 556,
						"comment": "Returns Value struct by index\nUseful for one-dimensional arrays\n",
						"deco": "yFiZyS4dpq25value5Value",
						"parameters": [
							{
								"name": "n",
								"deco": "i"
							}
						],
						"endline": 559,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "getValue",
						"line": 563,
						"comment": "Returns Value struct\nUseful for multidimensional arrays\n",
						"deco": "yFYyS4dpq25value5Value",
						"endline": 571,
						"char": 23,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isNULL",
						"line": 574,
						"comment": "Value NULL checking\n",
						"deco": "yFYb",
						"endline": 578,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 11,
				"kind": "struct"
			},
			{
				"name": "Notify",
				"line": 623,
				"comment": "Notify\n",
				"members": [
					{
						"endchar": 52,
						"name": "name",
						"line": 641,
						"comment": "Returns notification condition name\n",
						"deco": "FZAya",
						"endline": 641,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 51,
						"name": "extra",
						"line": 644,
						"comment": "Returns notification parameter\n",
						"deco": "FZAya",
						"endline": 644,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 37,
						"name": "pid",
						"line": 647,
						"comment": "Returns process ID of notifying server process\n",
						"deco": "FZm",
						"endline": 647,
						"originalType": "size_t()",
						"char": 12,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "ResponseException",
				"line": 651,
				"comment": "Covers errors of Answer creation when data was not received due to syntax errors, etc\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"name": "FATAL_ERROR",
						"line": 670,
						"value": "0",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "COLUMN_NOT_FOUND",
						"line": 671,
						"value": "1",
						"comment": "Column is not found\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "OUT_OF_RANGE",
						"line": 672,
						"value": "2",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "ExceptionType",
				"line": 668,
				"comment": "Answer exception types\n",
				"baseDeco": "i",
				"char": 1,
				"kind": "enum"
			},
			{
				"members": [
					{
						"offset": 76,
						"name": "type",
						"line": 678,
						"comment": "Exception type\n",
						"deco": "xE4dpq26result13ExceptionType",
						"originalType": "ExceptionType",
						"char": 25,
						"kind": "variable",
						"storageClass": [
							"const"
						]
					}
				],
				"name": "AnswerException",
				"line": 676,
				"comment": "Covers errors of access to Answer data\n",
				"base": "dpq2.exception.Dpq2Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": "Dealing with results of queries\n",
		"kind": "module"
	},
	{
		"file": "../../../.dub/packages/dpq2-1.0.0-alpha.10/dpq2/src/dpq2/value.d",
		"name": "dpq2.value",
		"members": [
			{
				"name": "Value",
				"line": 15,
				"comment": "Represents table cell or argument value\n\nInternally it is a ubyte[].\nIf it returned by Answer methods it contains a reference to the data of\nthe server answer and it can not be accessed after Answer is destroyed.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 34,
						"comment": "ctor\n",
						"deco": "FNaNcNfAhxE4dpq24oids7OidTypebxEQv5value11ValueFormatZSQBsQy5Value",
						"parameters": [
							{
								"name": "data",
								"deco": "Ah"
							},
							{
								"name": "oidType",
								"deco": "xE4dpq24oids7OidType"
							},
							{
								"name": "isNull",
								"deco": "b"
							},
							{
								"name": "format",
								"deco": "xE4dpq25value11ValueFormat",
								"default": "cast(ValueFormat)1"
							}
						],
						"endline": 40,
						"originalType": "pure ref @safe (ubyte[] data, in OidType oidType, bool isNull, in ValueFormat format = ValueFormat.BINARY)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 43,
						"comment": "Null Value constructor\n",
						"deco": "FNaNcNfxE4dpq25value11ValueFormatxEQBa4oids7OidTypeZSQBsQBq5Value",
						"parameters": [
							{
								"name": "format",
								"deco": "xE4dpq25value11ValueFormat"
							},
							{
								"name": "oidType",
								"deco": "xE4dpq24oids7OidType"
							}
						],
						"endline": 47,
						"originalType": "pure ref @safe (in ValueFormat format, in OidType oidType)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 9,
						"name": "isNull",
						"line": 52,
						"comment": "Indicates if the value is NULL\n",
						"deco": "xFNaNbNiNfZb",
						"endline": 55,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 9,
						"name": "isArray",
						"line": 58,
						"comment": "Indicates if the value is array type\n",
						"deco": "xFNaNbNiNfZb",
						"endline": 61,
						"char": 14,
						"kind": "function"
					},
					{
						"endchar": 9,
						"name": "oidType",
						"line": 65,
						"comment": "Returns Oid of the value\n",
						"deco": "xFNaNbNiNfZE4dpq24oids7OidType",
						"endline": 68,
						"char": 17,
						"kind": "function"
					},
					{
						"endchar": 9,
						"name": "format",
						"line": 71,
						"comment": "Returns ValueFormat representation (text or binary)\n",
						"deco": "xFNaNbNiNfZE4dpq25value11ValueFormat",
						"endline": 74,
						"char": 21,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 93,
						"comment": "\n",
						"deco": "xFNeZAya",
						"endline": 100,
						"char": 12,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"name": "TEXT",
						"line": 122,
						"value": "0",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "BINARY",
						"line": 123,
						"value": "1",
						"comment": "\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "ValueFormat",
				"line": 121,
				"comment": "\n",
				"baseDeco": "i",
				"char": 1,
				"kind": "enum"
			},
			{
				"members": [
					{
						"name": "NOT_ARRAY",
						"line": 131,
						"value": "0",
						"comment": "Format of the value isn't array\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NOT_BINARY",
						"line": 132,
						"value": "1",
						"comment": "Format of the column isn't binary\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NOT_TEXT",
						"line": 133,
						"value": "2",
						"comment": "Format of the column isn't text string\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "NOT_IMPLEMENTED",
						"line": 134,
						"value": "3",
						"comment": "Support of this type isn't implemented (or format isn't matches to specified D type)\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "SIZE_MISMATCH",
						"line": 135,
						"value": "4",
						"comment": "Result value size is not matched to the received Postgres value\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "CORRUPTED_JSONB",
						"line": 136,
						"value": "5",
						"comment": "Corrupted JSONB value\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "DATE_VALUE_OVERFLOW",
						"line": 137,
						"value": "6",
						"comment": "Date value isn't fits to Postgres binary Date value\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "ConvExceptionType",
				"line": 129,
				"comment": "Conversion exception types\n",
				"baseDeco": "i",
				"char": 1,
				"kind": "enum"
			},
			{
				"members": [
					{
						"offset": 76,
						"name": "type",
						"line": 143,
						"comment": "Exception type\n",
						"deco": "xE4dpq25value17ConvExceptionType",
						"originalType": "ConvExceptionType",
						"char": 29,
						"kind": "variable",
						"storageClass": [
							"const",
							"@safe"
						]
					}
				],
				"name": "ValueConvException",
				"line": 141,
				"comment": "Value conversion exception\n",
				"base": "std.conv.ConvException",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": "\n",
		"kind": "module"
	}
]